// Code generated by go-bindata.
// sources:
// sql/001_add-initial-tables.down.sql
// sql/001_add-initial-tables.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_addInitialTablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcd\x2b\xc9\x2c\xa9\xd4\xcb\x4f\x4b\xcb\x4c\x4e\x55\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xc2\x54\x51\x90\x58\x92\x99\x9a\x57\x82\xa6\x24\xd8\xd9\xc3\xd5\xd7\x11\xaa\xc6\x9a\x0b\x10\x00\x00\xff\xff\x72\x76\xd6\x8f\x59\x00\x00\x00")

func _001_addInitialTablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTablesDownSql,
		"001_add-initial-tables.down.sql",
	)
}

func _001_addInitialTablesDownSql() (*asset, error) {
	bytes, err := _001_addInitialTablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tables.down.sql", size: 89, mode: os.FileMode(420), modTime: time.Unix(1519071171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_addInitialTablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xcf\xcf\x8a\xc2\x30\x10\xc7\xf1\x7b\x9e\x62\x8e\xbb\xb0\xec\x0b\xec\x69\xb6\x3b\xd0\xb2\x69\xd5\x34\x15\x7a\x2a\xd1\x24\x38\xd0\x3f\xd2\x46\xd4\xb7\x97\x40\x85\x82\x7a\xf3\xfa\xc9\x17\x32\xbf\x44\x11\x6a\x82\x32\x49\x29\x47\x70\x7d\xe0\x70\xfd\x11\x62\x66\x8d\xbf\x92\x66\xfd\x3e\x9a\xc0\xae\x0f\xf0\x21\x00\xc6\xe1\xdc\xb0\x85\x92\x54\x86\x12\xd6\x2a\xcb\x51\xd5\xf0\x4f\xf5\x97\x80\xb9\x8f\xef\x5b\x54\x49\x8a\x0a\xaa\x22\xdb\x54\x04\xc5\x4a\x43\x51\x49\x19\xa3\xd6\x4c\xa1\xe9\x4d\xe7\xee\x51\x44\xcf\xe3\x13\xed\xd8\xda\xd6\x3d\xf0\x74\xf2\x9e\x2f\x4b\xd9\xf1\x18\x0e\xd6\x04\x07\x7f\xa8\x49\x7c\xbe\x18\x32\x78\xcf\x7b\xf7\xa6\x1d\xcb\xab\xe2\x8f\xb7\x00\x00\x00\xff\xff\xba\x47\x4e\x29\x51\x01\x00\x00")

func _001_addInitialTablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTablesUpSql,
		"001_add-initial-tables.up.sql",
	)
}

func _001_addInitialTablesUpSql() (*asset, error) {
	bytes, err := _001_addInitialTablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tables.up.sql", size: 337, mode: os.FileMode(420), modTime: time.Unix(1519069378, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_add-initial-tables.down.sql": _001_addInitialTablesDownSql,
	"001_add-initial-tables.up.sql": _001_addInitialTablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_add-initial-tables.down.sql": &bintree{_001_addInitialTablesDownSql, map[string]*bintree{}},
	"001_add-initial-tables.up.sql": &bintree{_001_addInitialTablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

