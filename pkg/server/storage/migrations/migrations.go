// Code generated by go-bindata.
// sources:
// sql/001_add-initial-tables.down.sql
// sql/001_add-initial-tables.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_addInitialTablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\x48\xcd\x2b\xc9\x2c\xa9\xd4\xcb\x4f\x4b\xcb\x4c\x4e\x8d\x87\xf0\xe2\x33\x53\xac\xb9\xc0\x6a\x42\x1c\x9d\x7c\x5c\x51\xd5\x40\x65\x50\x74\x17\x24\x96\x64\xa6\xe6\x95\xe0\xd7\x0e\x55\x04\x95\x0a\x76\xf6\x70\xf5\x75\x84\xca\x59\x73\x01\x02\x00\x00\xff\xff\xc7\x6a\x52\xd9\x92\x00\x00\x00")

func _001_addInitialTablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTablesDownSql,
		"001_add-initial-tables.down.sql",
	)
}

func _001_addInitialTablesDownSql() (*asset, error) {
	bytes, err := _001_addInitialTablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tables.down.sql", size: 146, mode: os.FileMode(420), modTime: time.Unix(1519051468, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_addInitialTablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xcd\x4a\xc5\x30\x10\x46\xf7\x79\x8a\x59\x7a\x41\x7c\x01\x57\x63\xef\x40\x83\x6d\xd5\xb4\x15\xbb\x2a\xd1\x24\x38\xd0\x1f\x69\x23\xea\xdb\x4b\x31\xda\x40\xdb\x8d\xdb\x33\x03\xdf\x39\x89\x22\xac\x08\xca\x24\xa5\x1c\xc1\x0e\x9e\xfd\xd7\xb5\x10\x01\x57\x78\x93\x51\xa0\x57\x6f\xda\xb3\x1d\x3c\x5c\x08\x80\x69\xfc\x68\xd9\x40\x49\x4a\x62\x06\xf7\x4a\xe6\xa8\x1a\xb8\xa5\xe6\x52\x40\xf8\x5f\xee\x8f\xa8\x92\x14\xd5\x02\x3b\x3d\xfb\x76\xd0\xbd\x8d\xa1\xe3\x69\x87\xf6\x6c\x4c\x67\x37\x78\x7e\x77\x8e\x3f\x63\xf2\xcc\x93\x7f\x35\xda\x5b\x38\x63\x45\xe2\xb4\x8a\xd7\x85\x7c\xa8\x09\x64\x71\xa6\x27\x08\xe2\xed\xea\x75\x57\x6c\xa2\xfe\x8e\xa7\x83\xfc\xd1\x39\x7e\xb1\xff\xac\x8f\x5b\x0e\x3d\x7f\x16\x76\x35\x7f\xc7\x63\xcb\xef\x00\x00\x00\xff\xff\xe7\xd4\x31\x81\xbb\x01\x00\x00")

func _001_addInitialTablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTablesUpSql,
		"001_add-initial-tables.up.sql",
	)
}

func _001_addInitialTablesUpSql() (*asset, error) {
	bytes, err := _001_addInitialTablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tables.up.sql", size: 443, mode: os.FileMode(420), modTime: time.Unix(1519059902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_add-initial-tables.down.sql": _001_addInitialTablesDownSql,
	"001_add-initial-tables.up.sql": _001_addInitialTablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_add-initial-tables.down.sql": &bintree{_001_addInitialTablesDownSql, map[string]*bintree{}},
	"001_add-initial-tables.up.sql": &bintree{_001_addInitialTablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

